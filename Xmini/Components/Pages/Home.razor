@page "/"
@using Xmini.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthStateProvider
@inject ApplicationDbContext DbContext

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<EditForm Model="_modelTweet" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <InputTextArea id="text" class="form-control" rows="3" @bind-Value="_modelTweet.Text" placeholder="Was gibt's Neues?" />
        <ValidationMessage For="@(() => _modelTweet.Text)" />
    </div>
    <button type="submit" class="btn btn-primary">Posten</button>
</EditForm>
<hr/>

@if (_modelLastTweets != null && _modelLastTweets.Count > 0)
{
    // Alle geladenen Tweets anzeigen
    // Hierzu Razor-Syntax verwenden
    foreach (var tweet in _modelLastTweets)
    {
        @* mb-3: margin-bottom 3 *@
        <div class="mb-3">
            @* fw-bold: font-weight bold *@
            <div class="fw-bold">
                @* Username und Create Time *@
                @((tweet.ApplicationUser?.UserName) ?? tweet.ApplicationUserId ?? "Unknown")
                (@tweet.CreatedAt.ToLocalTime())
            </div>
            @* white-space: pre-wrap; sorgt dafür, dass Zeilenumbrüche im Text erhalten bleiben *@
            <div style="white-space: pre-wrap;">
                @((tweet.Text) ?? string.Empty)
            </div>
            <div>
                <button class="btn btn-secondary" @onclick="() => OnLikeTweet(tweet)">Like</button>
                @((tweet.Likes?.Count) ?? 0)
            </div>
        </div>
        <hr />
    }
}

@code {
    // Da hier nur ein Tweet erstellt wird, kann das Model immer neu angelegt werden.
    private Tweet _modelTweet = new();
    private List<Tweet>? _modelLastTweets;
    private string? _userId;

    /// <summary>
    /// Wird aufgerufen, wenn die Komponente initialisiert wird.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserId();
        await LoadTweets();
        await base.OnInitializedAsync();
    }
    /// <summary>
    /// Die letzten 10 Tweets laden.
    /// </summary>
    /// <returns></returns>
    private async Task LoadTweets()
    {
        // Letzte 10 Tweets laden, sortiert nach Erstellungsdatum absteigend
        // Inkludiere die zugehörigen Benutzer und die Likes
        _modelLastTweets = await DbContext.Tweets
            .OrderByDescending(t => t.CreatedAt)
            .Include(u => u.ApplicationUser)
            .Include(l => l.Likes)
            .Take(10)
            .ToListAsync();
        // UI aktualisieren
        StateHasChanged();
    }
    /// <summary>
    /// Die aktuelle Benutzer-ID ermitteln.
    /// </summary>
    /// <returns></returns>
    private async Task GetCurrentUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }
    /// <summary>
    /// Wird aufgerufen, wenn das Formular erfolgreich übermittelt wurde.
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidSubmit()
    {
        // Sicherstellen, dass der Benutzer authentifiziert ist
        if (_userId != null)
        {
            // Tweet dem Benutzer zuordnen und speichern
            _modelTweet.ApplicationUserId = _userId;
            DbContext.Tweets.Add(_modelTweet);
            await DbContext.SaveChangesAsync();
            // Daten neu laden
            await LoadTweets();
            // Neuen Tweet bereitstellen
            _modelTweet = new Tweet();
        }
    }
    /// <summary>
    /// Ein Tweet wird geliked oder das Like wird entfernt.
    /// </summary>
    /// <param name="tweet"></param>
    /// <returns></returns>
    private async Task OnLikeTweet(Tweet tweet)
    {
        var newLike = new Like
        {
            TweetId = tweet.Id,
            ApplicationUserId = _userId
        };
        // Prüfen, ob der Benutzer den Tweet bereits geliked hat
        var existingLike = await DbContext.Likes
            .FirstOrDefaultAsync(l => l.TweetId == tweet.Id && l.ApplicationUserId == _userId);
        if (existingLike != null)
        {
            // Like entfernen
            DbContext.Likes.Remove(existingLike);
        }
        else
        {
            // Neues Like hinzufügen
            DbContext.Likes.Add(newLike);
        }
        await DbContext.SaveChangesAsync();
        // Daten neu laden
        await LoadTweets();
    }
}