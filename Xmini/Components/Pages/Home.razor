@page "/"
@* Imports *@
@using Xmini.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@* Iformationen zum angemeldeten User *@
@inject AuthenticationStateProvider AuthStateProvider
@* Datenbank-ContextFactory injizieren - über diese dann den DbContext erzeugen *@
@* DbContext immer neu erzeugen wenn man diesen braucht *@
@inject IDbContextFactory<ApplicationDbContext> Factory

@* Sicherstellen, dass nur authentifizierte Benutzer auf diese Seite zugreifen können *@
@attribute [Authorize]

<PageTitle>Home</PageTitle>

<EditForm Model="_modelTweet" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <InputTextArea id="text" class="form-control" rows="3" @bind-Value="_modelTweet.Text" placeholder="Was gibt's Neues?" />
        <ValidationMessage For="@(() => _modelTweet.Text)" />
    </div>
    @if (_modelTweet.Image != null)
    {
        <div class="mt-3">
            <img src="@ImagePreview" alt="Vorschau" class="img-thumbnail" style="max-width:500px;" />
        </div>
    }
    @* justify-content-between: Elemente links und rechts ausrichten *@
    <div class="d-flex justify-content-between align-items-start mb-2">
        <label class="btn btn-sm btn-outline-primary">
            Medien
            <InputFile OnChange="OnInputFileChange" accept="image/*" style="display:none" />
        </label>
        <button type="submit" class="btn btn-primary">Posten</button>
    </div>
</EditForm>
<hr/>

@if (_modelLastTweets != null && _modelLastTweets.Count > 0)
{
    // Alle geladenen Tweets anzeigen
    // Hierzu Razor-Syntax verwenden
    foreach (var tweet in _modelLastTweets)
    {
        // Context für die Datenbank erstellen
        ApplicationDbContext dbContext = Factory.CreateDbContext();

        <ul class="list-unstyled">
            @* mb-3: margin-bottom 3 *@
            <li class="mb-3">
                <div class="border rounded p-3">
                    @* -- Zeile 1: links Text, rechts Button *@
                    @* Content wird in einer flexbox dargestellt *@
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="fw-bold">
                            @* Username und Create Time *@
                            @if (tweet.ApplicationUserId != null)
                            {
                                <a href="/UserInfo/@tweet.ApplicationUserId" >@(tweet.ApplicationUser?.UserName)</a>
                            }
                            else
                            {
                                <span>Unbekannt</span>
                            }
                            (@tweet.CreatedAt.ToLocalTime())
                        </div>
                        @if (tweet.ApplicationUserId != _userId)
                        {
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => OnFollowUser(tweet)">
                                @* Prüfen, ob der aktuelle Benutzer dem Tweet-Ersteller folgt und entsprechend den Button-Text anpassen *@
                                @if (dbContext.Followers.Any(f => f.FollowerUserId == _userId && f.FollowsUserId == tweet.ApplicationUserId))
                                {
                                    <span>Nicht folgen</span>
                                }
                                else
                                {
                                    <span>Folgen</span>
                                }
                            </button>
                        }
                    </div>
                    @* Zeile 2: mehrzeiliger Text *@
                    @* White-space pre-wrap sorgt dafür, dass Zeilenumbrüche im Text erhalten bleiben *@
                    <div class="mb-2" style="white-space: pre-wrap;">
                        <p class="mb-0">
                            @((tweet.Text) ?? string.Empty)
                        </p>
                    </div>
                    @* Zeile 3: Bild (falls vorhanden) *@
                    @if (tweet.Image != null)
                    {
                        <div class="mt-3">
                            <img src="/images/@tweet.Id" alt="Bild" class="img-fluid" />
                        </div>
                    }
                    @* Zeile 4: Button (links) *@
                    <div>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => OnLikeTweet(tweet)">Like</button>
                        @((tweet.Likes?.Count) ?? 0)
                    </div>
                </div>
            </li>
        </ul>
    }
}

@code {
    // Da hier nur ein Tweet erstellt wird, kann das Model immer neu angelegt werden.
    private Tweet _modelTweet = new();
    private string? _userId;
    
    #region Tweets
    private List<Tweet>? _modelLastTweets;
    #endregion
    #region Image
    // Maximum erlaubt: 10 MB
    private readonly long _maxFileSize = 10 * 1024 * 1024;
    // Vorschau-URL für das Bild
    private string? ImagePreview => _modelTweet.Image != null && _modelTweet.ContentType != null
        ? $"data:{_modelTweet.ContentType};base64,{Convert.ToBase64String(_modelTweet.Image)}"
        : null;
    #endregion
    /// <summary>
    /// Wird aufgerufen, wenn die Komponente initialisiert wird.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserId();
        await LoadTweets();
        await base.OnInitializedAsync();
    }
    /// <summary>
    /// Die letzten 10 Tweets laden.
    /// </summary>
    /// <returns></returns>
    private async Task LoadTweets()
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        // Letzte 10 Tweets laden, sortiert nach Erstellungsdatum absteigend
        // Inkludiere die zugehörigen Benutzer und die Likes
        _modelLastTweets = await dbContext.Tweets
            .OrderByDescending(t => t.CreatedAt)
            .Include(u => u.ApplicationUser)
            .Include(l => l.Likes)
            .Take(10)
            .ToListAsync();
        // UI aktualisieren
        StateHasChanged();
    }
    /// <summary>
    /// Die aktuelle Benutzer-ID ermitteln.
    /// </summary>
    /// <returns></returns>
    private async Task GetCurrentUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }
    /// <summary>
    /// Wird aufgerufen, wenn das Formular erfolgreich übermittelt wurde.
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidSubmit()
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        // Sicherstellen, dass der Benutzer authentifiziert ist
        if (_userId != null)
        {
            // Tweet dem Benutzer zuordnen und speichern
            _modelTweet.ApplicationUserId = _userId;
            dbContext.Tweets.Add(_modelTweet);
            await dbContext.SaveChangesAsync();
            // Daten neu laden
            await LoadTweets();
            // Neuen Tweet bereitstellen
            _modelTweet = new Tweet();
        }
    }
    /// <summary>
    /// Ein Tweet wird geliked oder das Like wird entfernt.
    /// </summary>
    /// <param name="tweet"></param>
    /// <returns></returns>
    private async Task OnLikeTweet(Tweet tweet)
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        var newLike = new Like
        {
            TweetId = tweet.Id,
            ApplicationUserId = _userId
        };
        // Prüfen, ob der Benutzer den Tweet bereits geliked hat
        var existingLike = await dbContext.Likes
            .FirstOrDefaultAsync(l => l.TweetId == tweet.Id && l.ApplicationUserId == _userId);
        if (existingLike != null)
        {
            // Like entfernen
            dbContext.Likes.Remove(existingLike);
        }
        else
        {
            // Neues Like hinzufügen
            dbContext.Likes.Add(newLike);
        }
        await dbContext.SaveChangesAsync();
        // Daten neu laden
        await LoadTweets();
    }
    /// <summary>
    /// Ein Benutzer wird gefolgt oder das Folgen wird aufgehoben.
    /// </summary>
    /// <param name="tweet"></param>
    /// <returns></returns>
    private async Task OnFollowUser(Tweet tweet)
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        // Prüfen, ob der aktuelle Benutzer dem Tweet-Ersteller bereits folgt
        var existingFollower = await dbContext.Followers.FirstOrDefaultAsync(f => f.FollowsUserId == tweet.ApplicationUserId);
        if (existingFollower != null)
        {
            // Folgen aufheben
            dbContext.Followers.Remove(existingFollower);
        }
        else
        {
            // Neuen Follower hinzufügen
            var newFollower = new Followers
            {
                FollowerUserId = _userId,
                FollowsUserId = tweet.ApplicationUserId
            };
            dbContext.Followers.Add(newFollower);
        }
        await dbContext.SaveChangesAsync();
        // Daten neu laden
        await LoadTweets();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Prüfung: Typ
        if (!file.ContentType.StartsWith("image/"))
        {
            // Fehlermeldungen lassen wir mal weg - einfach nicht hochladen
            return;
        }
        // Prüfung: Größe
        if (file.Size > _maxFileSize)
        {
            // Fehlermeldungen lassen wir mal weg - einfach nicht hochladen
            return;
        }
        try
        {
            // // Browser-seitiges Skalieren: RequestImageFileAsync skaliert auf das angegebene Begrenzungsrechteck.
            var resized = await file.RequestImageFileAsync(file.ContentType, 800, 600);

            using var ms = new MemoryStream();
            await resized.OpenReadStream(_maxFileSize).CopyToAsync(ms);
            _modelTweet.Image = ms.ToArray();

            // Metadaten
            _modelTweet.ContentType = resized.ContentType ?? file.ContentType;

        }
        catch (Exception ex)
        {
            // Fehlerbehandlung (z. B. Größe überschritten o.ä.)
            Console.WriteLine(ex);
            _modelTweet.Image = null;
        }
    }

}