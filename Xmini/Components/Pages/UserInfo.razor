@page "/userinfo/{id}"
@using Xmini.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<ApplicationDbContext> Factory

@attribute [Authorize]

<PageTitle>User</PageTitle>

@* Anzeigen des Benutzernamens *@
@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @User.UserName;
}
@if (_modelLastTweets != null && _modelLastTweets.Count > 0)
{
    // Alle geladenen Tweets anzeigen
    // Hierzu Razor-Syntax verwenden
    foreach (var tweet in _modelLastTweets)
    {
        // Context für die Datenbank erstellen
        ApplicationDbContext dbContext = Factory.CreateDbContext();

        <ul class="list-unstyled">
            @* mb-3: margin-bottom 3 *@
            <li class="mb-3">
                <div class="border rounded p-3">
                    @* -- Zeile 1: links Text, rechts Button *@
                    @* Content wird in einer flexbox dargestellt *@
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="fw-bold">
                            @* Username und Create Time *@
                            @if (tweet.ApplicationUserId != null)
                            {
                                <a href="/UserInfo/@tweet.ApplicationUserId">@(tweet.ApplicationUser?.UserName)</a>
                            }
                            else
                            {
                                <span>Unbekannt</span>
                            }
                            (@tweet.CreatedAt.ToLocalTime())
                        </div>
                        @if (tweet.ApplicationUserId != Id)
                        {
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => OnFollowUser(tweet)">
                                @* Prüfen, ob der aktuelle Benutzer dem Tweet-Ersteller folgt und entsprechend den Button-Text anpassen *@
                                @if (dbContext.Followers.Any(f => f.FollowerUserId == Id && f.FollowsUserId == tweet.ApplicationUserId))
                                {
                                    <span>Nicht folgen</span>
                                }
                                else
                                {
                                    <span>Folgen</span>
                                }
                            </button>
                        }
                    </div>
                    @* Zeile 2: mehrzeiliger Text *@
                    @* White-space pre-wrap sorgt dafür, dass Zeilenumbrüche im Text erhalten bleiben *@
                    <div class="mb-2" style="white-space: pre-wrap;">
                        <p class="mb-0">
                            @((tweet.Text) ?? string.Empty)
                        </p>
                    </div>
                    @* Zeile 3: Bild (falls vorhanden) *@
                    @if (tweet.Image != null)
                    {
                        <div class="mt-3">
                            <img src="/images/@tweet.Id" alt="Bild" class="img-fluid" />
                        </div>
                    }
                    @* Zeile 4: Button (links) *@
                    <div>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => OnLikeTweet(tweet)">Like</button>
                        @((tweet.Likes?.Count) ?? 0)
                    </div>
                </div>
            </li>
        </ul>
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }
    public ApplicationUser? User { get; set; }
    private List<Tweet>? _modelLastTweets;

    protected override async Task OnInitializedAsync()
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        User = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == Id);
        await LoadTweets();
        await base.OnInitializedAsync();
    }
    /// <summary>
    /// Die Tweets des Users laden.
    /// </summary>
    /// <returns></returns>
    private async Task LoadTweets()
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        // Letzte 10 Tweets des Users laden, sortiert nach Erstellungsdatum absteigend
        // Inkludiere die zugehörigen Benutzer und die Likes
        _modelLastTweets = await dbContext.Tweets
            .Include(u => u.ApplicationUser)
            .Include(l => l.Likes)
            .Where(t => t.ApplicationUserId == Id)
            .OrderByDescending(t => t.CreatedAt)
            .Take(10)
            .ToListAsync();
        // UI aktualisieren
        StateHasChanged();
    }
    /// <summary>
    /// Ein Tweet wird geliked oder das Like wird entfernt.
    /// </summary>
    /// <param name="tweet"></param>
    /// <returns></returns>
    private async Task OnLikeTweet(Tweet tweet)
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        var newLike = new Like
        {
            TweetId = tweet.Id,
            ApplicationUserId = Id
        };
        // Prüfen, ob der Benutzer den Tweet bereits geliked hat
        var existingLike = await dbContext.Likes
            .FirstOrDefaultAsync(l => l.TweetId == tweet.Id && l.ApplicationUserId == Id);
        if (existingLike != null)
        {
            // Like entfernen
            dbContext.Likes.Remove(existingLike);
        }
        else
        {
            // Neues Like hinzufügen
            dbContext.Likes.Add(newLike);
        }
        await dbContext.SaveChangesAsync();
        // Daten neu laden
        await LoadTweets();
    }
    /// <summary>
    /// Ein Benutzer wird gefolgt oder das Folgen wird aufgehoben.
    /// </summary>
    /// <param name="tweet"></param>
    /// <returns></returns>
    private async Task OnFollowUser(Tweet tweet)
    {
        ApplicationDbContext dbContext = await Factory.CreateDbContextAsync();
        // Prüfen, ob der aktuelle Benutzer dem Tweet-Ersteller bereits folgt
        var existingFollower = await dbContext.Followers.FirstOrDefaultAsync(f => f.FollowsUserId == tweet.ApplicationUserId);
        if (existingFollower != null)
        {
            // Folgen aufheben
            dbContext.Followers.Remove(existingFollower);
        }
        else
        {
            // Neuen Follower hinzufügen
            var newFollower = new Followers
            {
                FollowerUserId = Id,
                FollowsUserId = tweet.ApplicationUserId
            };
            dbContext.Followers.Add(newFollower);
        }
        await dbContext.SaveChangesAsync();
        // Daten neu laden
        await LoadTweets();
    }
}
